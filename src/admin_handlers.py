import logging
from datetime import datetime
from aiogram import Bot, Router, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from src.config import APPLICATIONS_PER_PAGE
from src.database import get_applications_paginated, get_application_by_id, update_application_status
from src.keyboards import get_admin_pagination_keyboard, get_admin_review_keyboard
from src.ban_manager import BanManager

logger = logging.getLogger(__name__)

class AdminActions(StatesGroup):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    awaiting_message_to_user = State()
    reviewing_application = State()
    awaiting_rejection_reason = State()

admin_router = Router(name="admin_commands")


async def send_application_to_admins(
    bot: Bot, admin_chat_id: int, user_data: dict, from_user: types.User, app_id: int | None, is_update: bool = False
):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
        admin_chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        user_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∑–∞—è–≤–∫–∏.
        from_user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ –∑–∞—è–≤–∫—É.
        app_id: ID –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        is_update: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—è–≤–∫–∏.
    """
    status_text = "üîî <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏!</b>" if is_update or app_id else "üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>"
    if app_id:
        status_text += f" (ID: {app_id})"

    admin_message_text = (
        f"<b>–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {from_user.full_name}\n"
        f"<b>ID:</b> {from_user.id}\n"
        f"<b>Username:</b> @{from_user.username or 'N/A'}\n\n"
        f"<b><u>–î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:</u></b>\n"
        f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {user_data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"<b>–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:</b> {user_data.get('citizenship', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–û–±–ª–∞—Å—Ç—å:</b> {user_data.get('region_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞:</b> {user_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
    )
    
    full_admin_message = f"{status_text}\n\n{admin_message_text}"

    try:
        await bot.send_message(chat_id=admin_chat_id, text=full_admin_message, parse_mode=ParseMode.HTML)
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ ID {app_id or '–Ω–æ–≤–∞—è'} –æ—Ç {from_user.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {admin_chat_id}.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ –≤ —á–∞—Ç {admin_chat_id}: {e}", exc_info=True)


async def show_applications_page(target: types.Message | types.CallbackQuery, page: int = 1, is_edit: bool = False):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞—è–≤–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    Args:
        target: –û–±—ä–µ–∫—Ç Message –∏–ª–∏ CallbackQuery, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        is_edit: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page} –∑–∞—è–≤–æ–∫. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {is_edit}.")
    apps_on_page, total_pages, total_items = await get_applications_paginated(
        page=page, 
        per_page=APPLICATIONS_PER_PAGE,
        status_filter=['new', 'updated', 'updated_conflict']
    )

    if not apps_on_page:
        text = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
        final_reply_markup = None
        logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    else:
        text_parts = [f"üìù <b>–ó–∞—è–≤–∫–∏ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}, –í—Å–µ–≥–æ: {total_items}):</b>\n"]
        all_keyboard_rows = [] 

        for app_data in apps_on_page:
            (app_id, user_id, username, full_name, _, _, _, _, phone, status, created_at, updated_at) = app_data[:12]
            date_to_show_str = updated_at if status != 'new' else created_at
            formatted_date = datetime.strptime(date_to_show_str, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%y %H:%M')

            text_parts.append(
                f"\n<b>–ó–∞—è–≤–∫–∞ #{app_id}</b> (–°—Ç–∞—Ç—É—Å: <code>{status}</code>)\n"
                f"–û—Ç: {formatted_date}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name} (@{username or 'N/A'}, ID: {user_id})\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            )
            all_keyboard_rows.append([InlineKeyboardButton(text=f"–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É #{app_id}", callback_data=f"admin_app_review_{app_id}_{page}")])

        text = "".join(text_parts)
        pagination_kb = get_admin_pagination_keyboard(page, total_pages, action_prefix="admin_viewapps_page_")
        if pagination_kb:
            all_keyboard_rows.extend(pagination_kb.inline_keyboard)
        
        final_reply_markup = InlineKeyboardMarkup(inline_keyboard=all_keyboard_rows)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    target_message = target.message if isinstance(target, types.CallbackQuery) else target
    try:
        if is_edit:
            await target_message.edit_text(text, reply_markup=final_reply_markup, parse_mode=ParseMode.HTML)
        else:
            await target_message.answer(text, reply_markup=final_reply_markup, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å/–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞—è–≤–æ–∫: {e}. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await target_message.answer(text, reply_markup=final_reply_markup, parse_mode=ParseMode.HTML)

    if isinstance(target, types.CallbackQuery):
        await target.answer()


@admin_router.message(Command("view_apps"))
async def cmd_view_applications(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /view_apps, –æ—Ç–æ–±—Ä–∞–∂–∞—è –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞—è–≤–æ–∫."""
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /view_apps.")
    await state.clear()
    await show_applications_page(message, page=1, is_edit=False)


@admin_router.callback_query(F.data.startswith("admin_viewapps_page_"))
async def cq_admin_view_applications_page(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –≤ —Å–ø–∏—Å–∫–µ –∑–∞—è–≤–æ–∫."""
    page = int(callback_query.data.split("_")[-1])
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback_query.from_user.id} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞—è–≤–æ–∫ –Ω–∞ {page}.")
    await state.clear()
    await show_applications_page(callback_query, page=page, is_edit=True)


@admin_router.callback_query(F.data.startswith("admin_app_review_"))
async def cq_admin_app_start_review(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ '–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É', –æ—Ç–æ–±—Ä–∞–∂–∞—è –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π.
    """
    parts = callback_query.data.split("_")
    app_id = int(parts[-2])
    current_page = int(parts[-1])
    admin_id = callback_query.from_user.id
    
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –Ω–∞—á–∞–ª –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏ #{app_id} —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {current_page}.")
    app_data = await get_application_by_id(app_id)
    if not app_data:
        logger.warning(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É #{app_id}.")
        await callback_query.answer(f"–ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", show_alert=True)
        await show_applications_page(callback_query, page=current_page, is_edit=True) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        return

    (id_db, user_id, username, full_name, age, citizenship, region, address, phone, status, created_at, updated_at) = app_data
    
    await state.set_state(AdminActions.reviewing_application)
    await state.update_data(
        current_app_id=id_db, current_app_user_id=user_id, current_app_user_name=full_name,
        current_app_page_from_list=current_page, current_app_status=status
    )
    logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏ #{app_id}. –î–∞–Ω–Ω—ã–µ: {await state.get_data()}")

    created_at_str = datetime.strptime(created_at, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')
    updated_at_str = datetime.strptime(updated_at, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')
    
    review_text = (
        f"üìù <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏ #{id_db}</b> (–°—Ç–∞—Ç—É—Å: <code>{status}</code>)\n"
        f"–°–æ–∑–¥–∞–Ω–∞: {created_at_str}, –û–±–Ω–æ–≤–ª–µ–Ω–∞: {updated_at_str}\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {full_name} (@{username or 'N/A'}, ID: {user_id})\n"
        f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {age}\n"
        f"<b>–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:</b> {citizenship}\n"
        f"<b>–û–±–ª–∞—Å—Ç—å:</b> {region}\n"
        f"<b>–ê–¥—Ä–µ—Å:</b> {address}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    review_keyboard = get_admin_review_keyboard(id_db, current_page, user_id)
    
    await callback_query.message.edit_text(review_text, reply_markup=review_keyboard, parse_mode=ParseMode.HTML)
    await callback_query.answer()


@admin_router.callback_query(AdminActions.reviewing_application, F.data.startswith("admin_review_write_"))
async def cq_admin_review_write_start(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    admin_state_data = await state.get_data()
    user_full_name = admin_state_data.get("current_app_user_name")
    app_id = admin_state_data.get("current_app_id")

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback_query.from_user.id} –Ω–∞—á–∞–ª –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ #{app_id}.")
    await state.set_state(AdminActions.awaiting_message_to_user)
    
    await callback_query.message.edit_text(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_full_name} (–∑–∞—è–≤–∫–∞ #{app_id}).\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
        reply_markup=None
    )
    await callback_query.answer()


@admin_router.callback_query(AdminActions.reviewing_application, F.data.startswith("admin_review_complete_"))
async def cq_admin_review_complete(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏."""
    admin_state_data = await state.get_data()
    app_id = admin_state_data.get("current_app_id")
    user_id_to_notify = admin_state_data.get("current_app_user_id")
    page_to_return = admin_state_data.get("current_app_page_from_list", 1)
    admin_id = callback_query.from_user.id

    if not app_id:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ FSM: –Ω–µ –Ω–∞–π–¥–µ–Ω app_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}.")
        await callback_query.answer("–û—à–∏–±–∫–∞: ID –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} —É—Ç–≤–µ—Ä–¥–∏–ª –∑–∞—è–≤–∫—É #{app_id}.")
    await update_application_status(app_id, "completed", admin_id=admin_id)
    
    try:
        await bot.send_message(user_id_to_notify, f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{app_id} –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞! –°–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_notify} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏ #{app_id}.")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_notify} –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏ #{app_id}: {e}")

    await callback_query.answer(f"–ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ '–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è'.", show_alert=True)
    await state.clear()
    await show_applications_page(callback_query, page=page_to_return, is_edit=True)


@admin_router.callback_query(AdminActions.reviewing_application, F.data.startswith("admin_review_reject_"))
async def cq_admin_review_reject_start(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."""
    app_id = (await state.get_data()).get("current_app_id")
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback_query.from_user.id} –Ω–∞—á–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{app_id}.")
    await state.set_state(AdminActions.awaiting_rejection_reason)
    
    await callback_query.message.edit_text(
        f"üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{app_id}:\n–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /cancel",
        reply_markup=None
    )
    await callback_query.answer()


@admin_router.message(AdminActions.awaiting_rejection_reason, F.text)
async def process_rejection_reason(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    rejection_reason = message.text
    admin_data = await state.get_data()
    app_id = admin_data.get("current_app_id")
    user_id_to_notify = admin_data.get("current_app_user_id")
    page_to_return = admin_data.get("current_app_page_from_list", 1)
    admin_id = message.from_user.id

    if not all([app_id, user_id_to_notify]):
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ FSM: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ {admin_id}.")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É #{app_id}. –ü—Ä–∏—á–∏–Ω–∞: {rejection_reason}")
    await update_application_status(app_id, 'rejected', admin_id=admin_id)
    
    try:
        await bot.send_message(user_id_to_notify, f"‚ÑπÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ #{app_id} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: {rejection_reason}\n–û–±–Ω–æ–≤–∏—Ç–µ –∑–∞—è–≤–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë —Å–Ω–æ–≤–∞.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_notify} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_notify} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")
    
    await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.")
    await state.clear()
    await show_applications_page(message, page=page_to_return, is_edit=False)


@admin_router.callback_query(AdminActions.reviewing_application, F.data.startswith("admin_review_backtolist_"))
async def cq_admin_review_backtolist(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫."""
    page_to_return = int(callback_query.data.split("_")[-1])
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback_query.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_to_return}.")
    await state.clear()
    await show_applications_page(callback_query, page=page_to_return, is_edit=True)


@admin_router.callback_query(AdminActions.reviewing_application, F.data.startswith("admin_ban_user_"))
async def cq_admin_ban_user(callback_query: types.CallbackQuery, bot: Bot, state: FSMContext, ban_manager: BanManager):
    """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å –∑–∞—è–≤–∫–æ–π."""
    parts = callback_query.data.split("_")
    user_to_ban_id = int(parts[-1])
    app_id = int(parts[-2])
    page_to_return = int(parts[-3])
    admin_id = callback_query.from_user.id

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_to_ban_id} –∏–∑ –∑–∞—è–≤–∫–∏ #{app_id}.")
    await ban_manager.add_banned_user(user_to_ban_id, f'banned by admin {admin_id}')
    
    try:
        await bot.send_message(user_to_ban_id, "‚õîÔ∏è –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_to_ban_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_to_ban_id} –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")
    
    await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_ban_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
    await state.clear()
    await show_applications_page(callback_query, page=page_to_return, is_edit=True)


@admin_router.message(AdminActions.awaiting_message_to_user, F.text)
async def process_admin_message_to_user(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω–æ–º —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    admin_message_text = message.text
    admin_data = await state.get_data()
    target_user_id = admin_data.get("current_app_user_id")
    target_app_id = admin_data.get("current_app_id")
    admin_id = message.from_user.id
    page_to_return = admin_data.get("current_app_page_from_list", 1)

    if not all([target_user_id, target_app_id]):
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ FSM: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞ {admin_id}.")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} –ø–æ –∑–∞—è–≤–∫–µ #{target_app_id}.")
    try:
        await bot.send_message(target_user_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ #{target_app_id}:\n\n{admin_message_text}")
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {admin_id} –∫ {target_user_id}: {e}", exc_info=True)

    # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await show_applications_page(message, page=page_to_return, is_edit=True)


@admin_router.message(Command("cancel_admin_action"), AdminActions.awaiting_message_to_user)
async def cmd_cancel_admin_action(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ FSM-–¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä., –≤–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è)."""
    current_state = await state.get_state()
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}.")
    
    admin_data = await state.get_data()
    page_to_return = admin_data.get("current_app_page_from_list", 1)
    
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫.")
    await show_applications_page(message, page=page_to_return, is_edit=False)


@admin_router.callback_query(F.data == "admin_noop")
async def cq_admin_noop(callback_query: types.CallbackQuery):
    """–ü—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫, –Ω–µ —Ç—Ä–µ–±—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥–æ–ª–æ–≤–æ–∫)."""
    await callback_query.answer()

__all__ = ['admin_router', 'send_application_to_admins', 'AdminActions']