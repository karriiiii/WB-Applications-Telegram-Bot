import logging
import re
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode

from src.admin_handlers import send_application_to_admins
from src.keyboards import (
    USER_ASK_REGION, USER_ASK_ADDRESS_MSK, USER_ASK_ADDRESS_VLDMR,
    get_address_keyboard, get_region_keyboard, get_confirmation_keyboard
)
from src.database import add_or_update_application

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

user_router = Router(name="user_registration")

class UserRegistration(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    awaiting_age = State()
    awaiting_citizenship = State()
    awaiting_region = State()
    awaiting_address = State()
    awaiting_phone = State()
    awaiting_confirmation = State()

async def show_confirmation_message(message_or_cq: Message | CallbackQuery, state: FSMContext, edit_message: bool = False):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.

    Args:
        message_or_cq: –û–±—ä–µ–∫—Ç Message –∏–ª–∏ CallbackQuery, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        edit_message: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    user_data = await state.get_data()
    user_id = message_or_cq.from_user.id
    logger.info(f"–ü–æ–∫–∞–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –î–∞–Ω–Ω—ã–µ: {user_data}")
    
    text = (
        f"üìù <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
        f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {user_data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"<b>–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:</b> {user_data.get('citizenship', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–û–±–ª–∞—Å—Ç—å:</b> {user_data.get('region_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"<b>–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞:</b> {user_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        f"<b>–í—Å–µ –≤–µ—Ä–Ω–æ?</b>"
    )
    keyboard = await get_confirmation_keyboard()
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ callback –∏–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–ª–∞–≥
    if isinstance(message_or_cq, CallbackQuery) or edit_message:
        await message_or_cq.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    else: # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message_or_cq.answer(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

    if isinstance(message_or_cq, CallbackQuery):
        await message_or_cq.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FSM ---

@user_router.message(UserRegistration.awaiting_age)
async def process_age(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç, –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É."""
    user_id = message.from_user.id
    if not message.text or not message.text.isdigit():
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–Ω–µ —Ü–∏—Ñ—Ä—ã): '{message.text}'")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: 25")
        return
    
    age = int(message.text)
    if not (5 < age < 100):
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞): {age}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 6 –¥–æ 99 –ª–µ—Ç).")
        return
    
    await state.update_data(age=age)
    user_data = await state.get_data()
    
    if user_data.get("editing_now"):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞. –í–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é.")
        await state.update_data(editing_now=False)
        await state.set_state(UserRegistration.awaiting_confirmation)
        await show_confirmation_message(message, state)
    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∫–∞–∑–∞–ª –≤–æ–∑—Ä–∞—Å—Ç: {age}. –ü–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É '–≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ'.")
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ.")
        await state.set_state(UserRegistration.awaiting_citizenship)

@user_router.message(UserRegistration.awaiting_citizenship)
async def process_citizenship(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É."""
    user_id = message.from_user.id
    citizenship = message.text.strip()
    if not citizenship or len(citizenship) < 2:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: '{citizenship}'")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã/–≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞.")
        return

    await state.update_data(citizenship=citizenship)
    user_data = await state.get_data()

    if user_data.get("editing_now"):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞. –í–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é.")
        await state.update_data(editing_now=False)
        await state.set_state(UserRegistration.awaiting_confirmation)
        await show_confirmation_message(message, state)
    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∫–∞–∑–∞–ª –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: '{citizenship}'. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–≥–∏–æ–Ω–∞.")
        await message.answer(
            "–•–æ—Ä–æ—à–æ. –í –∫–∞–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –í—ã –∏—â–µ—Ç–µ —Ä–∞–±–æ—Ç—É?",
            reply_markup=get_region_keyboard()
        )
        await state.set_state(UserRegistration.awaiting_region)

@user_router.callback_query(UserRegistration.awaiting_region, F.data.startswith("region_"))
async def process_region_callback(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∞–¥—Ä–µ—Å."""
    region_code = callback_query.data.split("_")[1]
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ callback_data
    selected_region_text = next(
        (btn.text for row in USER_ASK_REGION for btn in row if btn.callback_data == callback_query.data),
        "–ù–µ —É–∫–∞–∑–∞–Ω"
    )
            
    await state.update_data(region_code=region_code, region_name=selected_region_text)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª —Ä–µ–≥–∏–æ–Ω: {selected_region_text} ({region_code}).")

    address_keyboard = get_address_keyboard(region_code)
    if address_keyboard:
        await callback_query.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_region_text}.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞:",
            reply_markup=address_keyboard
        )
        await state.set_state(UserRegistration.awaiting_address)
    else:
        logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ '{region_code}'.")
        await callback_query.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥—Ä–µ—Å–æ–≤.")
        await callback_query.answer("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", show_alert=True)
    await callback_query.answer()

@user_router.message(UserRegistration.awaiting_region)
async def process_region_text_instead_of_button(message: Message):
    """–õ–æ–≤–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –≤–º–µ—Å—Ç–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞."""
    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞.")
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É.",
        reply_markup=get_region_keyboard()
    )

@user_router.callback_query(UserRegistration.awaiting_address, F.data.startswith("address_"))
async def process_address_callback(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    user_data = await state.get_data()
    region_code = user_data.get('region_code')
    
    source_keyboard_data = USER_ASK_ADDRESS_MSK if region_code == 'msk' else USER_ASK_ADDRESS_VLDMR if region_code == 'vldmr' else None
    selected_address_text = "–ù–µ —É–∫–∞–∑–∞–Ω"
    if source_keyboard_data:
        selected_address_text = next(
            (btn.text for row in source_keyboard_data for btn in row if btn.callback_data == callback_query.data),
            "–ù–µ —É–∫–∞–∑–∞–Ω"
        )

    await state.update_data(address=selected_address_text)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –∞–¥—Ä–µ—Å: {selected_address_text}.")
    
    current_user_data = await state.get_data()
    if current_user_data.get("editing_now"):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞. –í–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é.")
        await state.update_data(editing_now=False)
        await state.set_state(UserRegistration.awaiting_confirmation)
        await show_confirmation_message(callback_query, state, edit_message=True)
    else:
        await callback_query.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–¥—Ä–µ—Å: {selected_address_text}.\n"
            "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79001234567 –∏–ª–∏ 89001234567)."
        )
        await state.set_state(UserRegistration.awaiting_phone)
    await callback_query.answer()

@user_router.message(UserRegistration.awaiting_address)
async def process_address_text_instead_of_button(message: Message, state: FSMContext):
    """–õ–æ–≤–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –≤–º–µ—Å—Ç–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞."""
    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞.")
    user_data = await state.get_data()
    region_code = user_data.get('region_code')
    address_keyboard = get_address_keyboard(region_code)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É.",
        reply_markup=address_keyboard
    )

@user_router.message(UserRegistration.awaiting_phone)
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω, –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é."""
    user_id = message.from_user.id
    phone_number = message.text.strip()
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    normalized_phone = re.sub(r"[ \-\(\)]", "", phone_number)
    
    if not re.fullmatch(r"(\+7|8)\d{10}", normalized_phone):
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: '{phone_number}'")
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX."
        )
        return

    await state.update_data(phone=phone_number)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∫–∞–∑–∞–ª —Ç–µ–ª–µ—Ñ–æ–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∞–Ω–∫–µ—Ç—ã.")
    
    await state.set_state(UserRegistration.awaiting_confirmation)
    await show_confirmation_message(message, state)

# --- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —ç—Ç–∞–ø–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---

@user_router.callback_query(UserRegistration.awaiting_confirmation, F.data.startswith("edit_"))
async def process_edit_action(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ '–ò–∑–º–µ–Ω–∏—Ç—å...' –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç FSM –≤ –Ω—É–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    action = callback_query.data.split("_")[1]
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è '{action}'.")
    await state.update_data(editing_now=True)

    actions = {
        "age": ("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:", UserRegistration.awaiting_age),
        "citizenship": ("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:", UserRegistration.awaiting_citizenship),
        "phone": ("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", UserRegistration.awaiting_phone),
    }

    if action in actions:
        text, new_state = actions[action]
        await callback_query.message.edit_text(text)
        await state.set_state(new_state)
    elif action == "region":
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω:", reply_markup=get_region_keyboard())
        await state.set_state(UserRegistration.awaiting_region)
    elif action == "address":
        user_data = await state.get_data()
        region_code = user_data.get("region_code")
        address_keyboard = get_address_keyboard(region_code)
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:", reply_markup=address_keyboard)
        await state.set_state(UserRegistration.awaiting_address)
    
    await callback_query.answer()

@user_router.callback_query(UserRegistration.awaiting_confirmation, F.data == "confirm_submission")
async def process_confirm_submission(callback_query: CallbackQuery, state: FSMContext, bot: Bot, admin_chat_id_from_mw: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–≤–æ—é –∑–∞—è–≤–∫—É. –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É.")
    
    user_data = await state.get_data()
    await state.clear()

    await callback_query.message.edit_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
        reply_markup=None
    )
    await callback_query.answer()

    try:
        await add_or_update_application(
            user_id=user_id,
            username=callback_query.from_user.username,
            full_name=callback_query.from_user.full_name,
            user_data=user_data,
            existing_app_id=user_data.get("existing_app_id")
        )
        await send_application_to_admins(
            bot=bot,
            admin_chat_id=admin_chat_id_from_mw,
            user_data=user_data,
            from_user=callback_query.from_user,
            app_id=user_data.get("existing_app_id")
        )
        logger.info(f"–ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@user_router.callback_query(UserRegistration.awaiting_confirmation, F.data == "cancel_submission")
async def process_cancel_submission(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏."""
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏.")
    await state.clear()
    await callback_query.message.edit_text(
        "–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start",
        reply_markup=None
    )
    await callback_query.answer()

@user_router.message(UserRegistration.awaiting_confirmation)
async def process_text_in_confirmation(message: Message, state: FSMContext):
    """–õ–æ–≤–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
    await show_confirmation_message(message, state)


__all__ = ['user_router', 'UserRegistration', 'show_confirmation_message']