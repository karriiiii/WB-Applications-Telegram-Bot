import asyncio
import logging

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove, BotCommandScopeAllPrivateChats
from aiogram.enums import ChatType

from src.setup_logging import setup_logger
from src.config import BOT_TOKEN, ADMIN_CHAT_ID_STR, ADMIN_USER_IDS_STR, DEFAULT_BOT_COMMANDS, GREETING_PICTURE_PATH
from src.middlewares import AdminChatIdMiddleware, BanManagerMiddleware
from src.filters import IsAdmin, IsBanned
from src.user_handlers import user_router, UserRegistration, show_confirmation_message
from src.admin_handlers import admin_router as admin_commands_router
from src.database import init_db, get_application_by_user_id
from src.keyboards import user_get_start_keyboard
from src.ban_manager import BanManager

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

# --- –û–°–ù–û–í–ù–û–ô –†–û–£–¢–ï–† –î–õ–Ø –û–ë–©–ò–• –ö–û–ú–ê–ù–î ---
common_router = Router(name="common_commands")

@common_router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ
    —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—è–≤–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({message.from_user.full_name}) –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start.")
    await state.clear()

    existing_application = await get_application_by_user_id(user_id)
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—è–≤–∫–∏ –¥–ª—è {user_id}: {'–ù–∞–π–¥–µ–Ω–∞' if existing_application else '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'}.")

    try:
        with open(GREETING_PICTURE_PATH, 'rb') as photo_file:
            photo = types.BufferedInputFile(photo_file.read(), filename='greeting.jpg')
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏ {GREETING_PICTURE_PATH}: {e}")
        photo = None

    greeting_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
    greeting_text += "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞.\n" if existing_application else "–ì–æ—Ç–æ–≤—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?\n"
    greeting_text += "(–ö–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ –Ω–∞–∂–∏–º–∞–µ—Ç—Å—è)"

    start_kb = user_get_start_keyboard(has_existing_application=bool(existing_application))

    if photo:
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=photo,
            caption=greeting_text,
            reply_markup=start_kb
        )
    else:
        await message.answer(greeting_text, reply_markup=start_kb)


@common_router.callback_query(F.data == "start_new_application")
async def cq_start_new_application(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É' / '–ü–æ–¥–∞—Ç—å –Ω–æ–≤—É—é'.
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏.
    """
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏.")
    await state.clear()
    
    existing_application = await get_application_by_user_id(user_id)
    if existing_application:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await state.update_data(existing_app_id=existing_application[0])
        logger.info(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞—è–≤–∫–∞ ID {existing_application[0]}, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

    try:
        await callback_query.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {callback_query.message.message_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    await callback_query.message.answer("–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º.\n–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
    await state.set_state(UserRegistration.awaiting_age)
    await callback_query.answer()


@common_router.callback_query(F.data == "start_edit_application")
async def cq_start_edit_application(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ—é –∑–∞—è–≤–∫—É'.
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ FSM –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—è–≤–∫–∏.")
    await state.clear()

    existing_application = await get_application_by_user_id(user_id)

    if existing_application:
        app_id, _, username, full_name, age, citizenship, region_name, address, phone, status = existing_application
        
        await state.update_data(
            existing_app_id=app_id, age=age, citizenship=citizenship, region_name=region_name,
            address=address, phone=phone, db_username=username, db_full_name=full_name
        )
        logger.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ ID {app_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        
        try:
            await callback_query.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {callback_query.message.message_id} –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")

        await state.set_state(UserRegistration.awaiting_confirmation)
        await show_confirmation_message(callback_query.message, state, edit_message=False)
    else:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É, –Ω–æ –æ–Ω–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î.")
        await callback_query.message.edit_text("–û—à–∏–±–∫–∞: –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∞–π—Ç–µ –Ω–æ–≤—É—é.")
    
    await callback_query.answer()


@common_router.message(Command("cancel"))
@common_router.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cmd_cancel(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /cancel –∏–ª–∏ —Ç–µ–∫—Å—Ç '–æ—Ç–º–µ–Ω–∞'.
    –ü—Ä–µ—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ (FSM) –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.", reply_markup=ReplyKeyboardRemove())
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}.")
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start", reply_markup=ReplyKeyboardRemove())


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    setup_logger()

    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await init_db()
    
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    if not BOT_TOKEN or BOT_TOKEN == "YOUR_BOT_TOKEN":
        logger.critical("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å BOT_TOKEN –≤ config.py!")
        return
    if not ADMIN_CHAT_ID_STR or ADMIN_CHAT_ID_STR == "YOUR_ADMIN_CHAT_ID_FOR_NOTIFICATIONS":
        logger.critical("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ADMIN_CHAT_ID_STR –≤ config.py!")
        return
    
    try:
        admin_chat_id_for_notifications = int(ADMIN_CHAT_ID_STR)
    except ValueError:
        logger.critical(f"ADMIN_CHAT_ID_STR '{ADMIN_CHAT_ID_STR}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    admin_user_ids_list = []
    if ADMIN_USER_IDS_STR and ADMIN_USER_IDS_STR != "YOUR_USER_ID_1,YOUR_USER_ID_2":
        try:
            admin_user_ids_list = [int(uid.strip()) for uid in ADMIN_USER_IDS_STR.split(',') if uid.strip()]
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_user_ids_list}")
        except ValueError:
            logger.error("–û—à–∏–±–∫–∞ –≤ ADMIN_USER_IDS_STR: –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
    
    if not admin_user_ids_list:
        logger.warning("–°–ø–∏—Å–æ–∫ ADMIN_USER_IDS_STR –ø—É—Å—Ç. –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

    logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–Ω–æ–≤...")
    ban_manager_instance = BanManager()
    await ban_manager_instance.load_banned_users_from_db()
    for admin_id in admin_user_ids_list:
        # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö FSM
        await ban_manager_instance.add_banned_user(admin_id, 'admin_privilege')
    logger.info("–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∏ –∫—ç—à–∏—Ä–æ–≤–∞–ª ID –∞–¥–º–∏–Ω–æ–≤.")
    
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()

    try:
        await bot.set_my_commands(DEFAULT_BOT_COMMANDS, scope=BotCommandScopeAllPrivateChats())
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: {e}")

    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middlewares...")
    notification_mw = AdminChatIdMiddleware(admin_chat_id=admin_chat_id_for_notifications)
    dp.update.outer_middleware(BanManagerMiddleware(ban_manager=ban_manager_instance))
    user_router.callback_query.middleware(notification_mw)
    admin_commands_router.message.middleware(notification_mw)

    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤...")
    is_admin_filter = IsAdmin(admin_ids=admin_user_ids_list)
    is_banned_filter = IsBanned()
    private_chat_filter = F.chat.type == ChatType.PRIVATE
    private_callback_filter = F.message.chat.type == ChatType.PRIVATE

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ —Ä–æ—É—Ç–µ—Ä–∞–º
    for router in [common_router, user_router, admin_commands_router]:
        router.message.filter(private_chat_filter)
        router.callback_query.filter(private_callback_filter)
    
    for router in [common_router, user_router]:
        router.message.filter(is_banned_filter)
        router.callback_query.filter(is_banned_filter)

    admin_commands_router.message.filter(is_admin_filter)
    admin_commands_router.callback_query.filter(is_admin_filter)
    logger.info("–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ —Ä–æ—É—Ç–µ—Ä–∞–º.")
    
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤...")
    dp.include_routers(common_router, user_router, admin_commands_router)

    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ polling...")
    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)